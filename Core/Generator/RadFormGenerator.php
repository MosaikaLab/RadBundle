<?php
namespace Mosaika\RadBundle\Core\Generator;

use Symfony\Component\DependencyInjection\ContainerInterface;
use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\PhpNamespace;
use Mosaika\RadBundle\Model\RadEntity;
use Mosaika\RadBundle\Model\RadController;
use Mosaika\RadBundle\Model\Query\RadQuery;
use Mosaika\RadBundle\Model\RadControllerAction;
use Mosaika\RadBundle\Utils\GeneratorUtils;

class RadFormGenerator extends RadGeneratorBase {
	
	protected $parent = "";

	
	/**
	 *
	 * @return \Mosaika\RadBundle\Core\Generator\RadFormGenerator
	 */
	public static function get(ContainerInterface $container){
		$builder = new RadFormGenerator();
		return $builder
		->setBaseNamespace("Form")
		->setContainer($container)
		;
	}
	
	public function commit(RadEntity $entity){
	    
	    $abstractNs = new PhpNamespace($this->findNamespace("AbstractForm"));
	    
	    $abstractNs->addUse("Symfony\Component\Form\AbstractType");
	    $abstractNs->addUse("Symfony\Component\Form\FormBuilderInterface");
	    $abstractNs->addUse("Symfony\Component\OptionsResolver\OptionsResolver");
	    
	    $abstractClass = (new ClassType("Abstract" . $entity->getName() . "Type", $abstractNs))
	    ->setAbstract(true)
	    ->setExtends("Symfony\Component\Form\AbstractType")
	    ->addComment("Autogenerated file. Do not edit this file, edit the FormType instead")
	    ;
	    
	    $buildForm = $abstractClass->addMethod("buildForm");
	    $buildForm->addParameter("builder")->setTypeHint("Symfony\Component\Form\FormBuilderInterface");
	    $buildForm->addParameter("options")->setTypeHint("array");
	    $buildForm->addBody('$builder');
	    foreach($entity->getFields() as $field){
	    		if(!$field->getUserWritable())
	    			continue;
		    	$name = $field->getName();
		    	$type = $field->getFormTypeClass();
		    	$attr = $field->getFormTypeAttributes();
		    	if($name!="id"){
		    		$buildForm->addBody(sprintf('->add("%s",%s,%s)',
		    				$name,
		    				$type ? $type : 'null',
		    				$attr ? var_export($attr, true) : 'array()'
		    		));
		    	}
	    }
	    $buildForm->addBody(";");
	    
	    
	    $configureOptions = $abstractClass->addMethod("configureOptions");
	    $configureOptions->addParameter("resolver")->setTypeHint("Symfony\Component\OptionsResolver\OptionsResolver");
	    $configureOptions->addBody('$resolver->setDefaults(array(');
	    $configureOptions->addBody("\t" . sprintf('"data_class" => "%s",',$entity->getFullClass()));
	    $configureOptions->addBody("\t" . '"csrf_protection" => false');
	    $configureOptions->addBody('));');
	    
	    $ns = new PhpNamespace($this->findNamespace("Form"));
	    
	    $ns->addUse("Symfony\Component\Form\AbstractType");
	    $ns->addUse("Symfony\Component\Form\FormBuilderInterface");
	    $ns->addUse("Symfony\Component\OptionsResolver\OptionsResolver");
	    
	    $class = (new ClassType($entity->getName() . "Type", $ns));
	    $class->setExtends($abstractNs->getName() . "\\" . $abstractClass->getName());
	    
	    
	    $abstractDir = $this->getWorkingPath("AbstractForm");
	    $dir = $this->getWorkingPath("Form");
	    
	    if(!file_exists($abstractDir)){
	        mkdir($abstractDir);
	    }
	    if(!file_exists($dir)){
	        mkdir($dir);
	    }
	    $abstractPath = $abstractDir. $abstractClass->getName() . ".php";
	    $path = $dir. $class->getName() . ".php";
	    
	    // Write Model class
	    echo "Writing file " . $abstractPath . PHP_EOL;
	    file_put_contents(
	        $abstractPath,
	        "<?php" . PHP_EOL . $abstractNs . $abstractClass
	    );
	    
	    // Write Entity class - Doesnt 
	    if(!file_exists($path)){
		    	echo "Writing file " . $path . PHP_EOL;
	        file_put_contents(
	            $path,
	            "<?php" . PHP_EOL . $ns . $class
	            );
	    }
        
        return $this;
	}

}