<?php
namespace Mosaika\RadBundle\Core\Generator;

use Symfony\Component\DependencyInjection\ContainerInterface;
use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\PhpNamespace;
use Mosaika\RadBundle\Model\RadEntity;
use Mosaika\RadBundle\Model\RadController;
use Mosaika\RadBundle\Model\Query\RadQuery;
use Mosaika\RadBundle\Model\RadControllerAction;
use Mosaika\RadBundle\Utils\GeneratorUtils;

class RadControllerGenerator extends RadGeneratorBase {
	
	protected $parent = "";

	
	/**
	 *
	 * @return \Mosaika\RadBundle\Core\Generator\RadControllerGenerator
	 */
	public static function get(ContainerInterface $container){
		$builder = new RadControllerGenerator();
		return $builder
		->setBaseNamespace("Controller")
		->setContainer($container)
		;
	}
	
	public function commit(RadController $controller){
	    
	    $abstractNs = new PhpNamespace($this->findNamespace("AbstractController"));
	    
	    $abstractNs->addUse("Sensio\Bundle\FrameworkExtraBundle\Configuration\Route","Route");
	    $abstractNs->addUse("Symfony\Bundle\FrameworkBundle\Controller\Controller");
	    $abstractNs->addUse("Symfony\Component\HttpFoundation\Request");
	    foreach($controller->getUses() as $use){
	    		if(strpos($use,"@")!==FALSE){
	    			list($use,$as) = explode("@",$use);
	    		}else{
	    			$as = null;
	    		}
	    		$abstractNs->addUse($use,$as);
	    }
	    $abstractClass = (new ClassType("Abstract" . $controller->getName(), $abstractNs))
	    ->setAbstract(true)
	    ->setExtends($controller->getExtends() ? $controller->getExtends()  : "Symfony\Bundle\FrameworkBundle\Controller\Controller")
	    ->addComment("Autogenerated file. Do not edit this file, edit the Controller insted")
	    ;
	    $queryActions = [];
	    /**
	     * @var RadQuery $query
	     * @var RadControllerAction $action
	     */
	    foreach($controller->getQueries() as $query){
	    		$action = new RadControllerAction(GeneratorUtils::propertyToMethod($query->getName(),"get"),$controller);
	    		$action->setBody($this->compileTwig("controller/exposed_query.php.twig", array(
	    				"query" => $query
	    		)));
	    		$queryActions[] = $action;
	    }
	    foreach(array_merge($controller->getActions(),$queryActions) as $action){
	    		$method = $abstractClass->addMethod($action->getName() . "Action");

	    		if($action->getAddRoute()){
		    		$method->addComment(sprintf('@Route("%s", name="%s")',$action->getFullUrl() , $action->getFullRoute()));
	    		}
	    		foreach($action->getAnnotations() as $annotation){	
	    			$method->addComment($annotation);
	    		}
	    		$method->addParameter("request")->setTypeHint("Symfony\Component\HttpFoundation\Request");
	    		foreach($action->getArguments() as $arg){
	    			$method->addParameter($arg->getName(),$arg->getDefaultValue());
	    			
	    		}
	    		$method->setVisibility("public");
	    		
	    		$method->setBody($action->getBody());
	    }
	    $ns = new PhpNamespace($this->findNamespace("Controller"));

	    $ns->addUse("Sensio\Bundle\FrameworkExtraBundle\Configuration\Route","Route");
	    $ns->addUse("Symfony\Bundle\FrameworkBundle\Controller\Controller");
	    $ns->addUse("Symfony\Component\HttpFoundation\Request");
	    
	    $class = (new ClassType($controller->getName(), $ns));
	    $class->setExtends($abstractNs->getName() . "\\" . $abstractClass->getName());
	    
	    
	    $abstractDir = $this->getWorkingPath("AbstractController");
	    $dir = $this->getWorkingPath();
	    
	    if(!file_exists($abstractDir)){
	        mkdir($abstractDir);
	    }
	    if(!file_exists($dir)){
	        mkdir($dir);
	    }
	    $abstractPath = $abstractDir. $abstractClass->getName() . ".php";
	    $path = $dir. $class->getName() . ".php";
	    
	    // Write Model class
	    echo "Writing file " . $abstractPath . PHP_EOL;
	    file_put_contents(
	        $abstractPath,
	        "<?php" . PHP_EOL . $abstractNs . $abstractClass
	    );
	    
	    // Write Entity class - Doesnt 
	    if(true || !file_exists($path)){
		    	echo "Writing file " . $path . PHP_EOL;
	        file_put_contents(
	            $path,
	            "<?php" . PHP_EOL . $ns . $class
	            );
	    }
        
        return $this;
	}

    public function getFields()
    {
        return $this->fields;
    }

    public function setFields($fields)
    {
        $this->fields = $fields;
        return $this;
    }
	public function getCrud() {
		return $this->crud;
	}
	public function setCrud($crud) {
		$this->crud = $crud;
		return $this;
	}
}