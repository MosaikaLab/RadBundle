<?php
namespace Mosaika\RadBundle\Core\Generator;

use Symfony\Component\DependencyInjection\ContainerInterface;
use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\PhpNamespace;
use Mosaika\RadBundle\Model\RadEntity;
use Mosaika\RadBundle\Model\RadController;

class RadControllerGenerator extends RadGeneratorBase {
	
	protected $parent = "";

	
	/**
	 *
	 * @return \Mosaika\RadBundle\Core\Generator\RadControllerGenerator
	 */
	public static function get(ContainerInterface $container){
		$builder = new RadControllerGenerator();
		return $builder
		->setBaseNamespace("Controller")
		->setContainer($container)
		;
	}
	
	public function commit(RadController $controller){
	    
	    $abstractNs = new PhpNamespace($this->findNamespace("AbstractController"));
	    $abstractNs
//	    ->addUse("Doctrine\ORM\Mapping","ORM")
//	    ->addUse("Symfony\Component\Validator\Constraints","Assert")
	    ;
	    
	    $abstractClass = (new ClassType($controller->getName() . "Abstract", $abstractNs))
	    ->setAbstract(true)
	    ->addComment("Autogenerated file. Do not edit this file, edit the Controller insted")
	    ;
	    $constructor = $abstractClass->addMethod("__construct");
	    foreach($controller->getActions() as $action){
	    	continue;
	    	
	        $name = $field->getName();
	        $value = $field->getDefaultValue();
	        $phpType = $field->getPhpType();
	        
	        $property = $modelClass->addProperty($name);
	        $annotations = $field->getAnnotations();
	        $annotations[] = '@var ' . $phpType;
	        
	        foreach($annotations as $a){
	            $property->addComment($a);
	        }
	        if($value){
	            $constructor->addBody(sprintf('$this->%s = %s;',$name,$value));
	        }
	        
	        $property->setVisibility("protected");
	        
	        $methods = $field->getMethods($modelClass);
	        foreach($methods as $m){
	            $modelClass->methods[] = $m;
	        }
	        
	    }
	    
	    $ns = new PhpNamespace($this->findNamespace("Controller"));

	    $ns->addUse("Sensio\Bundle\FrameworkExtraBundle\Configuration\Route","Route");
	    $ns->addUse("Symfony\Bundle\FrameworkBundle\Controller\Controller");
	    $ns->addUse("Symfony\Component\HttpFoundation\Request");
	    
	    $class = (new ClassType($controller->getName(), $ns));
	    $class->setExtends($abstractNs->getName() . "\\" . $abstractClass->getName());
	    
	    
	    $abstractDir = $this->getWorkingPath("AbstractController");
	    $dir = $this->getWorkingPath();
	    
	    if(!file_exists($abstractDir)){
	        mkdir($abstractDir);
	    }
	    if(!file_exists($dir)){
	        mkdir($dir);
	    }
	    $abstractPath = $abstractDir. $abstractClass->getName() . ".php";
	    $path = $dir. $class->getName() . ".php";
	    
	    // Write Model class
	    file_put_contents(
	        $abstractPath,
	        "<?php" . PHP_EOL . $abstractNs . $abstractClass
	    );
	    
	    // Write Entity class - Doesnt 
	    if(!file_exists($path)){
	        file_put_contents(
	            $path,
	            "<?php" . PHP_EOL . $ns . $class
	            );
	    }
	    echo "Rad controller commit: " . $path . PHP_EOL;
	    echo "Rad controller commit: " . $abstractPath . PHP_EOL;
        
        return $this;
	}

    public function getFields()
    {
        return $this->fields;
    }

    public function setFields($fields)
    {
        $this->fields = $fields;
        return $this;
    }
	public function getCrud() {
		return $this->crud;
	}
	public function setCrud($crud) {
		$this->crud = $crud;
		return $this;
	}
}