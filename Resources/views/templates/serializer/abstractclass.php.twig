namespace {{ ns }};
use Symfony\Component\DependencyInjection\ContainerInterface;

class {{ name }}{
	/**
	 * 
	 * @var array
	 */
	protected $errors;
	
	/**
	 *
	 * @var ContainerInterface
	 */
	protected $container;

	/**
	 *
	 * @var \Doctrine\ORM\EntityManagerInterface
	 */
	protected $em;
	
	/**
	 * 
	 */
	protected $repository;
	
	/**
	 * 
	 * @param ContainerInterface $container
	 */
	public function __construct(ContainerInterface $container){
		$this->container = $container;
		$this->em = $container->get("doctrine")->getManager();
		$this->repository = $this->em->getRepository({{entity.fullClass}}::class);
	}
	/**
	 * 
	 * @param string $type Class of type
	 * @param {{entity.fullClass}} $entity
	 */
	public function getForm($type, $entity){
		$form = $this->container->get('form.factory')->create($type, $entity, array(
				
		));
		return $form;
	}
	
	protected function dbToProperty($dbName){
		$str = str_replace(' ', '', ucwords(str_replace('_', ' ', $dbName)));
		$str = strtolower(substr($str,0,1)) . substr($str,1);
		return $str;
	}
	protected function propertyToDb($input){
		$matches = array();
		preg_match_all('!([A-Z][A-Z0-9]*(?=$|[A-Z][a-z0-9])|[A-Za-z][a-z0-9]+)!', $input, $matches);
		$ret = $matches[0];
		foreach ($ret as &$match) {
			$match = $match == strtoupper($match) ? strtolower($match) : lcfirst($match);
		}
		return implode('_', $ret);
	}

	/**
	 * 
	 * @param array $array
	 * @return {{entity.fullClass}}
	 */
	public function unserializeArray($array, $entity=null){
		if(!$entity){
			if(isset($array["id"]) && intval($array["id"]) > 0){
				$entity = $this->repository->find(intval($array["id"]));
			}else{
				$entity = new {{ entity.fullClass }};
			}
		}
		$references = array();
		{% for name, ent in referencedEntities %}
$references["{{name}}"] = array("doctrine" => {{ent.array ? "true" : "false"}}, "array" => {{ent.array ? "true" : "false"}}, "class" => "{{ent.class}}");
		{% endfor %}

		foreach($array as $fieldName => $value){
			$ref = null;
			if(isset($references[$fieldName])){
				$ref = $references[$fieldName];
			}else if(isset($references[$this->dbToProperty($fieldName)])){
				$ref = $references[$this->dbToProperty($fieldName)];
			}
			if($ref){
				if(isset($ref["doctrine"]) && $ref["doctrine"]){
					if($ref["array"]){
						$value = array_map(function($id) use($ref){
							if($id && is_array($id)){
								// Se ricevo un array che descrive l'oggetto, 
								// lo carico tramite il serializer di riferimento
								$serializerClass = substr(str_replace("Entity","Serializer",$ref["class"]) . "Serializer",1);
								$serializer = $this->container->get($serializerClass);
								return $serializer->unserializeArray($id);
							}
							return $this->em->getRepository($ref["class"])->find($id);
						}, $value); 
					}else if($value && is_numeric($value)){
						$value = $this->em->getRepository($ref["class"])->find($value);
					}else if($value && is_array($value)){
						// Se ricevo un array che descrive l'oggetto, 
						// lo carico tramite il serializer di riferimento
						$serializerClass = substr(str_replace("Entity","Serializer",$ref["class"]) . "Serializer",1);
						$serializer = $this->container->get($serializerClass);
						$value = $serializer->unserializeArray($value);
					}
				}else{
					if(isset($ref["helper"])){

					}else{
						$cls = $ref["class"];
						switch($cls){
							case '\DateTime':
								if(!$value)
									$value = null;
								if(is_numeric($value)){
									$d = new \Datetime();
									$d->setTimestamp($value);
									$value = $d;
								}else{
									$date = \DateTime::createFromFormat("Y-m-d\TH:i",$value);
									if(!$date){
										$date = new \DateTime($value);
									}
									$value = $date ? $date : null;

								}
								break;
							default: 
								$value = new $cls($value);
						}
					}
				}
			}
			$method = "set" . ucfirst($this->dbToProperty($fieldName));
			if(method_exists($entity, $method)){
				$entity->$method($value);
			}
		}
		return $entity;
	}

	/**
	 * 
	 * @param array $array
	 * @param string $formType Form type class
	 * @param {{entity.fullClass}} $entity Entity to serialize, null to create new instance or load by array["id"] 
	 * @return {{entity.fullClass}}
	 */
	public function unserialize($array, $formType="{{ defaultForm }}",$entity=null){
		if(!$entity){
			if(isset($array["id"]) && intval($array["id"]) > 0){
				$entity = $this->repository->find(intval($array["id"]));
			}else{
				$entity = new {{ entity.fullClass }};
			}
		}
		$form = $this->getForm($formType, $entity);
		$data = array();
		foreach($form as $fieldName => $field){
			$k = $this->propertyToDb($fieldName);
			if(isset($array[$k])){
				$type = $field->getConfig()->getType()->getInnerType();
				$data[$fieldName] = $array[$k];
				if($type instanceof \Symfony\Bridge\Doctrine\Form\Type\EntityType){
					if(is_array($data[$fieldName]) && isset($data[$fieldName]["id"])){
						$data[$fieldName] = $data[$fieldName]["id"];
					}else if(!is_numeric($data[$fieldName])){
						$form->remove($fieldName);
					}
				}
			}else{
				$form->remove($fieldName);
			}
		}
		
		if($form->submit($data)->isValid()){
			return $entity;
		}else{
			$errors = array();
			foreach($form->getErrors(true) as $err){
				$errors[$err->getOrigin()->getName()] = $err->getMessage();
			}
			$this->errors = $errors;
			return null;
		}
	}
	
	/**
	 * 
	 * @param {{entity.fullClass}} $entity
	 */
	public function serialize($entity){
		// Serializer built-in with JSM
		return $entity;
	}
	/**
	 * @return array
	 */
	public function getErrors() {
		return $this->errors;
	}

	
}